"""
SeDream v4 Image Generation Model Module
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é Bytedance SeDream v4 —á–µ—Ä–µ–∑ FAL API
"""

import os
import re
import logging
from typing import Any, Dict, List, Union
from dataclasses import dataclass

import fal_client


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger("seedream-model")


# –¢–∏–ø—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
ImageSizeValue = Union[str, Dict[str, int]]

# –†–∞–∑–º–µ—Ä—ã –¥–ª—è SeDream v4 (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 4K)
SEEDREAM_SIZE_MAP = {
    "–ö–≤–∞–¥—Ä–∞—Ç 2K": {"width": 2048, "height": 2048},
    "–ö–≤–∞–¥—Ä–∞—Ç HD": "square_hd",
    "–ü–æ—Ä—Ç—Ä–µ—Ç 9:16": "portrait_16_9", 
    "–ê–ª—å–±–æ–º 16:9": "landscape_16_9",
    "–ê–ª—å–±–æ–º 4:3": "landscape_4_3",
    "4K –ö–≤–∞–¥—Ä–∞—Ç": {"width": 4096, "height": 4096},  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π 4K —Ä–µ–∂–∏–º
}

SEEDREAM_ALLOWED_SIZES: List[str] = list(SEEDREAM_SIZE_MAP.keys())

# –†–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ 2K/4K)
SEEDREAM_EDIT_SIZE_MAP = {
    "–ê–≤—Ç–æ 2K": "auto_2K",
    "–ê–≤—Ç–æ 4K": "auto_4K",
}
SEEDREAM_EDIT_ALLOWED_SIZES: List[str] = list(SEEDREAM_EDIT_SIZE_MAP.keys())


@dataclass
class SeDreamGenerationOptions:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ SeDream v4"""
    image_size: Union[str, Dict[str, int]] = "portrait_16_9"
    num_images: int = 1
    max_images: int = 1
    enable_safety_checker: bool = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è SeDream
    seed: Union[int, None] = None
    sync_mode: bool = False


@dataclass
class SeDreamGenerationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è SeDream v4"""
    success: bool
    images: List[Dict[str, Any]]
    seed: Union[int, None] = None
    error: Union[str, None] = None
    
    @property
    def image_urls(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if not self.success or not self.images:
            return []
        
        urls = []
        for img in self.images:
            if isinstance(img, dict) and img.get("url"):
                urls.append(img["url"])
        return urls


class SeDreamImageGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é SeDream v4 —á–µ—Ä–µ–∑ FAL API"""
    
    MODEL_ENDPOINT = "fal-ai/bytedance/seedream/v4/text-to-image"
    MODEL_NAME = "SeDream v4"
    MODEL_DISPLAY_NAME = "SeDream 4.0"
    
    def __init__(self, fal_api_key: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        Args:
            fal_api_key: API –∫–ª—é—á –¥–ª—è FAL, –µ—Å–ª–∏ None - –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.fal_api_key = fal_api_key or os.getenv("FAL_KEY")
        if not self.fal_api_key:
            raise ValueError("FAL_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    
    @staticmethod
    def parse_image_size(value: str) -> ImageSizeValue:
        """
        –ü–∞—Ä—Å–∏—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è SeDream v4
        
        Args:
            value: —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä "4096x4096" –∏–ª–∏ "portrait_16_9")
            
        Returns:
            –†–∞–∑–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ API –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å width/height
        """
        v = value.strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç widthxheight (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4096x4096)
        match = re.match(r"^(\d{3,5})x(\d{3,5})$", v)
        if match:
            width = int(match.group(1))
            height = int(match.group(2))
            
            # SeDream –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç 1024 –¥–æ 4096
            if 1024 <= width <= 4096 and 1024 <= height <= 4096:
                return {"width": width, "height": height}
            else:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –µ—Å–ª–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                width = max(1024, min(4096, width))
                height = max(1024, min(4096, height))
                return {"width": width, "height": height}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã API
        allowed_api_sizes = {
            "square_hd", "square", "portrait_4_3", "portrait_16_9",
            "landscape_4_3", "landscape_16_9"
        }
        
        if v in allowed_api_sizes:
            return v
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è SeDream
        return "portrait_16_9"
    
    @staticmethod
    def parse_flags_and_prompt(text: str) -> tuple[str, Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ñ–ª–∞–≥–∏ –∏ –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è SeDream v4
        
        Args:
            text: —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ñ–ª–∞–≥–∞–º–∏
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–ø—Ä–æ–º–ø—Ç, —Å–ª–æ–≤–∞—Ä—å_–æ–ø—Ü–∏–π)
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
        try:
            import shlex
            tokens = shlex.split(text)
        except Exception:
            tokens = text.split()

        options: Dict[str, Any] = {}
        prompt_tokens: List[str] = []

        for token in tokens:
            if token.startswith("--") and "=" in token:
                key, value = token[2:].split("=", 1)
                key = key.strip().lower()
                value = value.strip().strip('"').strip("'")

                if key in {"size", "image_size"}:
                    options["image_size"] = SeDreamImageGenerator.parse_image_size(value)
                elif key in {"seed"}:
                    try:
                        options["seed"] = int(value)
                    except ValueError:
                        pass
                elif key in {"images", "num_images"}:
                    try:
                        # SeDream –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ–ª—å—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        options["num_images"] = max(1, min(8, int(value)))
                    except ValueError:
                        pass
                elif key in {"max_images"}:
                    try:
                        options["max_images"] = max(1, min(8, int(value)))
                    except ValueError:
                        pass
                elif key in {"safety", "enable_safety_checker"}:
                    options["enable_safety_checker"] = value.lower() in {"1", "true", "yes", "on"}
                elif key in {"sync", "sync_mode"}:
                    options["sync_mode"] = value.lower() in {"1", "true", "yes", "on"}
            else:
                prompt_tokens.append(token)

        prompt = " ".join(prompt_tokens).strip()
        return prompt, options
    
    def generate_image(self, prompt: str, options: SeDreamGenerationOptions = None) -> SeDreamGenerationResult:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–º–ø—Ç—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        
        Args:
            prompt: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            options: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        if not prompt.strip():
            return SeDreamGenerationResult(success=False, images=[], error="–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if options is None:
            options = SeDreamGenerationOptions()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è API
        arguments = {
            "prompt": prompt,
            "image_size": options.image_size,
            "num_images": options.num_images,
            "max_images": options.max_images,
            "enable_safety_checker": options.enable_safety_checker,
            "sync_mode": options.sync_mode,
        }
        
        if options.seed is not None:
            arguments["seed"] = options.seed

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        is_4k = isinstance(options.image_size, dict) and options.image_size.get("width", 0) >= 4096
        size_info = f"4K ({options.image_size['width']}x{options.image_size['height']})" if is_4k else str(options.image_size)
        
        logger.info("üé® Starting SeDream v4 generation | Size: %s | Images: %s | Safety: %s", 
                    size_info,
                    options.num_images,
                    "ON" if options.enable_safety_checker else "OFF")

        def on_queue_update(update: Any) -> None:
            # –ü–æ–¥–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–æ–≥–∏ FAL API
            pass

        try:
            result: Dict[str, Any] = fal_client.subscribe(
                self.MODEL_ENDPOINT,
                arguments=arguments,
                with_logs=False,
                on_queue_update=on_queue_update,
            )
            
            if not isinstance(result, dict):
                error_msg = f"Invalid response format: {type(result)}"
                logger.error("‚ùå SeDream API error | %s", error_msg)
                return SeDreamGenerationResult(success=False, images=[], error=error_msg)
            
            images = result.get("images", [])
            if not images:
                return SeDreamGenerationResult(success=False, images=[], error="no_images")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            images_count = len(images)
            returned_seed = result.get("seed")
            logger.info("‚úÖ SeDream v4 generation completed | Images: %d | Seed: %s", 
                       images_count, returned_seed)
            
            return SeDreamGenerationResult(
                success=True, 
                images=images, 
                seed=returned_seed
            )
            
        except Exception as e:
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ FAL API
            error_msg = SeDreamImageGenerator._parse_error_message(e)
            logger.error("‚ùå SeDream API failed | %s", error_msg)
            return SeDreamGenerationResult(success=False, images=[], error=error_msg)
    
    def generate_from_command_text(self, command_text: str) -> SeDreamGenerationResult:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã —Å —Ñ–ª–∞–≥–∞–º–∏
        
        Args:
            command_text: —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "/imagine –∫–æ—Ç --size=4096x4096")
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        prompt, parsed_options = self.parse_flags_and_prompt(command_text)
        
        if not prompt:
            return SeDreamGenerationResult(success=False, images=[], error="–ü—Ä–æ–º–ø—Ç –ø—É—Å—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
        options = SeDreamGenerationOptions()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
        if "image_size" in parsed_options:
            options.image_size = parsed_options["image_size"]
        if "num_images" in parsed_options:
            options.num_images = parsed_options["num_images"]
        if "max_images" in parsed_options:
            options.max_images = parsed_options["max_images"]
        if "enable_safety_checker" in parsed_options:
            options.enable_safety_checker = parsed_options["enable_safety_checker"]
        if "seed" in parsed_options:
            options.seed = parsed_options["seed"]
        if "sync_mode" in parsed_options:
            options.sync_mode = parsed_options["sync_mode"]
        
        return self.generate_image(prompt, options)

    @staticmethod
    def convert_user_size_to_api(user_size: str) -> Union[str, Dict[str, int]]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –≤ API —Ñ–æ—Ä–º–∞—Ç
        
        Args:
            user_size: —Ä–∞–∑–º–µ—Ä –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "4K –ö–≤–∞–¥—Ä–∞—Ç")
            
        Returns:
            –†–∞–∑–º–µ—Ä –≤ API —Ñ–æ—Ä–º–∞—Ç–µ
        """
        return SEEDREAM_SIZE_MAP.get(user_size, "portrait_16_9")
    
    @staticmethod
    def is_4k_size(size_value: Union[str, Dict[str, int]]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞–∑–º–µ—Ä 4K
        
        Args:
            size_value: –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ 4K —Ä–∞–∑–º–µ—Ä
        """
        if isinstance(size_value, dict):
            width = size_value.get("width", 0)
            height = size_value.get("height", 0)
            return width >= 4096 or height >= 4096
        return False
    
    @staticmethod
    def _parse_error_message(error: Exception) -> str:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç FAL API
        
        Args:
            error: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç FAL API
            
        Returns:
            –ß–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        error_str = str(error)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ content policy violation
        if "content_policy_violation" in error_str.lower():
            return "content_policy_violation"
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫—É –µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        try:
            # –ò—â–µ–º JSON –≤ —Å—Ç—Ä–æ–∫–µ –æ—à–∏–±–∫–∏
            import json
            import re
            
            # –ò—â–µ–º JSON –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫–µ
            json_match = re.search(r'\[{.*}\]', error_str)
            if json_match:
                error_list = json.loads(json_match.group())
                if isinstance(error_list, list) and len(error_list) > 0:
                    first_error = error_list[0]
                    if isinstance(first_error, dict):
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        error_type = first_error.get("type", "")
                        error_msg = first_error.get("msg", "")
                        
                        if error_type == "content_policy_violation":
                            return "content_policy_violation"
                        elif error_msg:
                            return error_msg
                        elif error_type:
                            return error_type
            
        except (json.JSONDecodeError, ValueError, AttributeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
            pass
        
        return error_str


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_seedream_generator() -> SeDreamImageGenerator:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ SeDream v4"""
    return SeDreamImageGenerator()


def generate_seedream_image(prompt: str, options: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SeDream v4 (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    Args:
        prompt: –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        options: —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    try:
        generator = create_seedream_generator()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø—Ü–∏–π –≤ –Ω–æ–≤—ã–π
        seedream_options = SeDreamGenerationOptions()
        if options:
            if "image_size" in options:
                seedream_options.image_size = options["image_size"]
            if "num_images" in options:
                seedream_options.num_images = options["num_images"]
            if "max_images" in options:
                seedream_options.max_images = options["max_images"]
            if "enable_safety_checker" in options:
                seedream_options.enable_safety_checker = options["enable_safety_checker"]
            if "seed" in options:
                seedream_options.seed = options["seed"]
            if "sync_mode" in options:
                seedream_options.sync_mode = options["sync_mode"]
        
        result = generator.generate_image(prompt, seedream_options)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if result.success:
            response = {"images": result.images}
            if result.seed is not None:
                response["seed"] = result.seed
            return response
        else:
            return {"images": [], "error": result.error}
            
    except Exception as e:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        error_msg = SeDreamImageGenerator._parse_error_message(e)
        return {"images": [], "error": error_msg}

@dataclass
class SeDreamEditOptions:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ SeDream v4 Edit"""
    image_size: Union[str, Dict[str, int]] = "auto_2K"
    num_images: int = 1
    max_images: int = 1
    enable_safety_checker: bool = True
    seed: Union[int, None] = None
    sync_mode: bool = False


class SeDreamEditGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π SeDream v4 Edit —á–µ—Ä–µ–∑ FAL API"""

    MODEL_ENDPOINT = "fal-ai/bytedance/seedream/v4/edit"

    def __init__(self, fal_api_key: str = None):
        self.fal_api_key = fal_api_key or os.getenv("FAL_KEY")
        if not self.fal_api_key:
            raise ValueError("FAL_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    def edit_image(self, prompt: str, image_urls: List[str], options: SeDreamEditOptions = None) -> SeDreamGenerationResult:
        if not prompt.strip():
            return SeDreamGenerationResult(success=False, images=[], error="–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        if not image_urls:
            return SeDreamGenerationResult(success=False, images=[], error="–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        options = options or SeDreamEditOptions()

        arguments: Dict[str, Any] = {
            "prompt": prompt,
            "image_urls": image_urls[:10],
            "image_size": options.image_size,
            "num_images": options.num_images,
            "max_images": options.max_images,
            "enable_safety_checker": options.enable_safety_checker,
            "sync_mode": options.sync_mode,
        }
        if options.seed is not None:
            arguments["seed"] = options.seed

        try:
            result: Dict[str, Any] = fal_client.subscribe(
                self.MODEL_ENDPOINT,
                arguments=arguments,
                with_logs=False,
            )

            if not isinstance(result, dict):
                error_msg = f"Invalid response format: {type(result)}"
                logger.error("‚ùå SeDream Edit API error | %s", error_msg)
                return SeDreamGenerationResult(success=False, images=[], error=error_msg)

            images = result.get("images", [])
            if not images:
                return SeDreamGenerationResult(success=False, images=[], error="no_images")

            returned_seed = result.get("seed")
            return SeDreamGenerationResult(success=True, images=images, seed=returned_seed)

        except Exception as e:
            error_msg = SeDreamImageGenerator._parse_error_message(e)
            logger.error("‚ùå SeDream Edit API failed | %s", error_msg)
            return SeDreamGenerationResult(success=False, images=[], error=error_msg)


def convert_user_edit_size_to_api(user_size: str) -> Union[str, Dict[str, int]]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ API –∑–Ω–∞—á–µ–Ω–∏–µ."""
    return SEEDREAM_EDIT_SIZE_MAP.get(user_size, "auto_2K")


def generate_seedream_edit(prompt: str, image_urls: List[str], options: Dict[str, Any] = None) -> Dict[str, Any]:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SeDream v4 Edit –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    try:
        generator = SeDreamEditGenerator()

        edit_options = SeDreamEditOptions()
        if options:
            if "image_size" in options:
                edit_options.image_size = options["image_size"]
            if "num_images" in options:
                edit_options.num_images = options["num_images"]
            if "max_images" in options:
                edit_options.max_images = options["max_images"]
            if "enable_safety_checker" in options:
                edit_options.enable_safety_checker = options["enable_safety_checker"]
            if "seed" in options:
                edit_options.seed = options["seed"]
            if "sync_mode" in options:
                edit_options.sync_mode = options["sync_mode"]

        result = generator.edit_image(prompt, image_urls, edit_options)
        if result.success:
            response = {"images": result.images}
            if result.seed is not None:
                response["seed"] = result.seed
            return response
        else:
            return {"images": [], "error": result.error}
    except Exception as e:
        error_msg = SeDreamImageGenerator._parse_error_message(e)
        return {"images": [], "error": error_msg}
